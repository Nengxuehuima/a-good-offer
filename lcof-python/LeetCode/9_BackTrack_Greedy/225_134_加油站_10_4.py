"""
在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas[i] 升。

你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。

给定两个整数数组 gas 和 cost ，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1 。如果存在解，则 保证 它是 唯一 的。


输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
输出: 3
解释:
从 3 号加油站(索引为 3 处)出发,可获得 4 升汽油，此时油箱有 = 0 + 4 = 4 升汽油
到达 4 号加油站,此时油箱有 4 - 1 + 5 = 8 升汽油
到达 0 号加油站,此时油箱有 8 - 2 + 1 = 7 升汽油
到达 1 号加油站,此时油箱有 7 - 3 + 2 = 6 升汽油
到达 2 号加油站,此时油箱有 6 - 4 + 3 = 5 升汽油
到达 3 号加油站,你需要消耗 5 升汽油，因此总油耗为 5。
最后到达的加油站是 3 号加油站。


输入: gas = [2,3,4], cost = [3,4,3]
输出: -1
"""
class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        # 跑到当前站的剩余油量
        curSum = 0
        # 总共耗油量 如果小于0表示无论如何也无法走完一圈 可以省一个for
        totalSum = 0
        # 默认从第一个开始出发 开始贪
        start = 0
        for i in range(len(gas)):
            curSum += gas[i] - cost[i]
            # 为什么不能等于呢?因为curSum会清0
            totalSum += gas[i] - cost[i]
            if curSum < 0: # 说明之前的出发点都不行 因为油不够
                start = i+1
                curSum = 0 # 因为会清0所以不能和totalSum相等
        if totalSum < 0:
            return -1
        return start