1.
不再中二
牛牛有一个长度为 
n
n 的整数数组 
a
1
,
a
2
,
…
,
a
n
a 
1
​
 ,a 
2
​
 ,…,a 
n
​
  。牛牛为了不再中二，希望能够将数组元素中含有 
2
2 的数字进行删除，即对于第 
i
i 个元素 
a
i
a 
i
​
  ，删除元素中全部的 
2
2 ，剩余部分仍按顺序连接成为一个新的整数（不含前导零）；若剩余部分为空，则将 
a
i
a 
i
​
  从数组中删除。牛牛给你这个初始数组，希望你能将这个数组变得不再中二后返回。
时间限制：C/C++ 1秒，其他语言2秒
空间限制：C/C++ 256M，其他语言512M
示例1
输入例子：
[5,12,20,2,77]
输出例子：
[5,1,0,77]
例子说明：
a_1 不含 2 ，保留原数；a_2 删除最后一位 2 ；a_3 删除第一位 2 ；a_4 删除 2 后为空；a_5 不含 2 ，保留原数。
```c++
#include <string>
#include <vector>
class Solution {
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param a int整型vector 
     * @return int整型vector
     */
    vector<int> newArray(vector<int>& a) {
        vector<int> v;
        for(int i : a)
        {
          string num_str = to_string(i);
          string new_str = "";
          for (char c: num_str)
            {
                if(c!='2')
                    new_str+=c;
            }
            if (new_str.empty()) {
                continue;
            }
            auto new_num = stoi(new_str);
            v.emplace_back(new_num);
        }
        return v;
    }
};
```

2.
链表前后缀
牛牛有一个长度为 
n
n 的链表 
a
1
,
a
2
,
…
,
a
n
a 
1
​
 ,a 
2
​
 ,…,a 
n
​
  和一个长度为 
m
m 的链表 
b
1
,
b
2
,
…
,
b
m
b 
1
​
 ,b 
2
​
 ,…,b 
m
​
 。这两个链表含有公共的前缀节点和公共的后缀节点，其可以表示成如下的形式：
          ->o->...->o
         /           \
o->...->o             ->o->...->o
         \           /
          ->o->...->o
牛牛现在给你这两个链表，他希望你能将两个链表的公共前缀和后缀提取出来并进行拼接后输出。
时间限制：C/C++ 1秒，其他语言2秒
空间限制：C/C++ 256M，其他语言512M
示例1
输入例子：
{1,2,2,3,4},{1,2,1,2,3,3,4}
输出例子：
{1,2,3,4}
例子说明：


两个链表可以表示成如下形式。



       ->2
      /   \
1->2->     -------->3->4
      \          /
       ->1->2->3 



其公共前缀和后缀拼接后为

1\rightarrow 2\rightarrow 3\rightarrow 4。
示例2
输入例子：
{1,2,3,4,5},{1,2,4,5}
输出例子：
{1,2,4,5}

```c++
/**
 * struct ListNode {
 *  int val;
 *  struct ListNode *next;
 *  ListNode(int x) : val(x), next(nullptr) {}
 * };
 */
#include <iostream>
class Solution {
  public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * @param a ListNode类
     * @param b ListNode类
     * @return ListNode类
     */
    ListNode* reverse(ListNode* head) {
        print(head);
        if (head == nullptr)
            return nullptr;
        ListNode* pre = nullptr;
        ListNode* after = head;
        while (after) {
            ListNode* temp = after->next;
            after->next = pre;
            pre = after;
            after = temp;
        }
        print(pre);
        return pre;
    }
    void print(ListNode* a) {
        ListNode* head = a;
        while (head) {
            std::cout << head->val << "  ";
            head = head->next;
        }
        std::cout << std::endl;
    }
    ListNode* mergeList(ListNode* a, ListNode* b) {
        ListNode* headA = a;
        print(a);
        ListNode* headB = b;
        ListNode* newList = nullptr;
        ListNode* curList = nullptr;

        // Merge common values from a and b
        while (headA != nullptr && headB != nullptr && headA->val == headB->val) {
            if (newList == nullptr) {
                newList = headA;
                curList = newList;
            } else {
                curList->next = headA;
                curList = curList->next;
            }
            headA = headA->next;
            headB = headB->next;
        }

        if (curList) {
            curList->next = nullptr;
        }
        std::cout << "newList:";
        print(newList);
        std::cout << "curList:";
        print(curList);
        std::cout << "reverse:";
        print(a);
        headA = reverse(headA);
        headB = reverse(b);
        std::cout << "headA:";
        print(headA);
        std::cout << "headB:";
        print(headB);
        ListNode* newList2 = nullptr;
        ListNode* cur2List = nullptr;

        // Merge common values from reversed a and b
        while (headA != nullptr && headB != nullptr && headA->val == headB->val) {
            if (newList2 == nullptr) {
                newList2 = headA;
                cur2List = newList2;
            } else {
                cur2List->next = headA;
                cur2List = cur2List->next;
            }
            headA = headA->next;
            headB = headB->next;
        }

        if (cur2List) {
            cur2List->next = nullptr;
        }
        newList2 = reverse(newList2);

        // Merge newList and newList2
        if (newList == nullptr) {
            return newList2;
        }

        // Connecting the newList and newList2 together
        curList->next = newList2;

        return newList;
    }
};
```